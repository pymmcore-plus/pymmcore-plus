name: tests

on:
  push:
    branches:
      - main
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 16 * * 1" # monday at noon est
  workflow_dispatch:

jobs:
  test:
    name: ${{ matrix.platform }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[testing]

      - name: Install Micro-Manager
        run: mmcore install

      - name: Test
        run: pytest -v --color=yes --cov=pymmcore_plus --cov-report=xml

      - name: Coverage
        uses: codecov/codecov-action@v3

  test_widgets:
    name: mmcore-widgets
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/checkout@v3
        with:
          repository: pymmcore-plus/pymmcore-widgets
          path: pymmcore-widgets
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install pymmcore-widgets
        run: |
          python -m pip install --upgrade pip
          python -m pip install .[test,image,pyqt5]
        working-directory: pymmcore-widgets

      - name: Install core
        run: python -m pip install -e .[testing] -U

      - name: Install Micro-Manager
        run: mmcore install

      - name: Run pymmcore-widgets tests
        run: python -m pytest -v --color=yes -W ignore
        working-directory: pymmcore-widgets

  test-napari-micro:
    name: test napari-micromanager
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          path: pymmcore-plus
          fetch-depth: 0

      - uses: actions/checkout@v3
        with:
          repository: pymmcore-plus/napari-micromanager
          path: napari-micromanager
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Windows OpenGL
        if: runner.os == 'Windows'
        run: |
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          python -m pip install -e ./napari-micromanager[testing]
          python -m pip install -e ./pymmcore-plus[testing]

      - name: Install Micro-Manager
        run: mmcore install

      - name: Run napari-micromanager tests
        run: python -m pytest -v --color=yes -W ignore
        working-directory: napari-micromanager

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: ${{ github.repository == 'pymmcore-plus/pymmcore-plus' && contains(github.ref, 'tags') }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
        run: |
          git tag
          python -m build
          twine check dist/*
          twine upload dist/*
      - uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
