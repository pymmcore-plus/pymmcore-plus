name: tests

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main]
    tags: [v*]
  pull_request: {}
  workflow_dispatch:
  schedule:
    - cron: "0 16 * * 1" # monday at noon est

jobs:
  test:
    name: ${{ matrix.os }} py${{ matrix.python-version }} ${{ matrix.add-group }} ${{ matrix.nano }} ${{ matrix.resolution }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ["3.9", "3.11", "3.13"]
        include:
          - os: windows-latest
            python-version: "3.9"
            add-group: "PySide2"
          - os: macos-13
            python-version: "3.12"
            add-group: "PySide6"
          - os: macos-13
            python-version: "3.11"
            add-group: "PyQt6"
          - os: windows-latest
            python-version: "3.13"
            add-group: "PyQt6"
          - os: ubuntu-latest
            python-version: "3.12"

          # test pymmcore-nano
          - os: windows-latest
            python-version: "3.10"
            nano: "nano"
          - os: macos-13
            python-version: "3.12"
            nano: "nano"

          - os: windows-latest
            python-version: "3.13"
            resolution: "lowest-direct"
            add-group: "PySide6"
          - os: macos-latest
            python-version: "3.9"
            resolution: "lowest-direct"
            add-group: "PyQt6"

    env:
      UV_NO_SYNC: "1"
    steps:
      - uses: actions/checkout@v5

      - uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - run: uv sync --no-dev --group test --group ${{ matrix.add-group || 'test' }} --resolution ${{ matrix.resolution || 'highest'}}

      - if: matrix.nano != ''
        run: |
          uv pip install pymmcore-nano
          uv pip uninstall pymmcore

      - name: Get pymmcore version (env)
        shell: bash
        run: |
          ver=$(uv run python -c 'from pymmcore_plus import _pymmcore;print(_pymmcore.version_info.device_interface)')
          echo "PYMM_VERSION=$ver" >> $GITHUB_ENV

      - uses: pymmcore-plus/setup-mm-test-adapters@main
        with:
          version: ${{ env.PYMM_VERSION }}

      - run: uv run coverage run -p -m pytest -v --color=yes ${{ matrix.resolution == 'lowest-direct' && '-W ignore' || '' }}

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: covreport-${{ matrix.os }}-py${{ matrix.python-version }}-${{ matrix.add-group }}-${{ matrix.nano}}-${{ matrix.resolution }}
          path: ./.coverage*
          include-hidden-files: true

  upload_coverage:
    if: always()
    needs: [test]
    uses: pyapp-kit/workflows/.github/workflows/upload-coverage.yml@v2
    secrets:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}

  test-pymmcore-widgets:
    name: test pymmcore-widgets
    runs-on: macos-13
    env:
      UV_MANAGED_PYTHON: "1"
      UV_NO_SYNC: "1"
    strategy:
      fail-fast: false
      matrix:
        qt: [PySide6, PyQt6]
    steps:
      - uses: actions/checkout@v5
        with:
          repository: pymmcore-plus/pymmcore-widgets
          fetch-depth: 0
      - uses: actions/checkout@v5
        with:
          path: pymmcore-plus
          fetch-depth: 0
      - uses: astral-sh/setup-uv@v6
        with:
          python-version: "3.12"
          enable-cache: true
      - uses: pyvista/setup-headless-display-action@v4
        with:
          qt: true

      - name: Install dependencies
        run: |
          uv sync --no-dev --group test --extra ${{ matrix.qt }}
          uv pip install ./pymmcore-plus
          uv pip list

      - name: Get pymmcore version (env)
        shell: bash
        run: |
          ver=$(uv run python -c 'from pymmcore_plus import _pymmcore;print(_pymmcore.version_info.device_interface)')
          echo "PYMM_VERSION=$ver" >> $GITHUB_ENV

      - name: Setup MM test adapters
        uses: pymmcore-plus/setup-mm-test-adapters@main
        with:
          version: ${{ env.PYMM_VERSION }}

      - run: uv run pytest -v --color=yes -W ignore

  test-pymmcore-gui:
    name: test pymmcore-gui
    runs-on: macos-13
    env:
      UV_MANAGED_PYTHON: "1"
      UV_NO_SYNC: "1"
    strategy:
      fail-fast: false
      matrix:
        qt: [PySide6, PyQt6]
    steps:
      - uses: actions/checkout@v5
        with:
          repository: pymmcore-plus/pymmcore-gui
          fetch-depth: 0
      - uses: actions/checkout@v5
        with:
          path: pymmcore-plus
          fetch-depth: 0
      - uses: astral-sh/setup-uv@v6
        with:
          python-version: "3.12"
          enable-cache: true
      - uses: pyvista/setup-headless-display-action@v4
        with:
          qt: true

      - name: Install dependencies
        shell: bash
        run: |
          if [[ "${{ matrix.qt }}" == "PySide6" ]]; then
            uv sync --group PySide6 --no-install-package PyQt6 --no-install-package PyQt6Ads
          else
            uv sync
          fi
          uv pip install ./pymmcore-plus
          uv pip list

      - name: Get pymmcore version (env)
        shell: bash
        run: |
          ver=$(uv run python -c 'from pymmcore_plus import _pymmcore;print(_pymmcore.version_info.device_interface)')
          echo "PYMM_VERSION=$ver" >> $GITHUB_ENV

      - name: Setup MM test adapters
        uses: pymmcore-plus/setup-mm-test-adapters@main
        with:
          version: ${{ env.PYMM_VERSION }}

      - run: uv run pytest -v --color=yes -W ignore

  benchmarks:
    runs-on: ubuntu-latest
    env:
      UV_NO_SYNC: "1"
    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6
        with:
          python-version: "3.12"
          enable-cache: true

      - name: install
        run: uv sync --no-dev --group test-codspeed

      - name: Cache Linux Build
        id: cache-mm-build
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pymmcore-plus/
          key: ${{ runner.os }}-mmbuild-74-${{ hashFiles('src/pymmcore_plus/_build.py') }}

      - name: Build Micro-Manager
        if: steps.cache-mm-build.outputs.cache-hit != 'true'
        run: uv run mmcore build-dev

      - name: Run benchmarks
        uses: CodSpeedHQ/action@v3
        with:
          run: uv run pytest -W ignore --codspeed -v --color=yes

  deploy:
    needs: test
    if: ${{ github.repository == 'pymmcore-plus/pymmcore-plus' && contains(github.ref, 'tags') }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: ðŸ‘· Build
        run: pipx run build

      - name: ðŸš¢ Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

      - uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: "./dist/*"
