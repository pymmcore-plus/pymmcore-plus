from typing import Any, Sequence, Tuple, overload

import numpy as np
import pymmcore
from useq import MDASequence as MDASequence

from .._util import find_micromanager as find_micromanager
from ._constants import DeviceDetectionStatus, DeviceType, PropertyType
from ._metadata import Metadata
from ._signals import _CMMCoreSignaler

class CMMCorePlus(pymmcore.CMMCore, _CMMCoreSignaler):
    def __init__(
        self, mm_path: Any | None = ..., adapter_paths: Sequence[str] = ...
    ) -> None: ...
    # Re-implemented methods from the CMMCore API
    def setDeviceAdapterSearchPaths(self, adapter_paths: Sequence[str]): ...
    def loadSystemConfiguration(self, fileName: str = ...) -> None: ...
    def getDeviceType(self, label: str) -> DeviceType: ...
    def getPropertyType(self, label: str, propName: str) -> PropertyType: ...
    def detectDevice(self, deviceLabel: str) -> DeviceDetectionStatus: ...
    @overload
    def getLastImageMD(self, channel: int, slice: int, md: Metadata) -> np.ndarray: ...
    @overload
    def getLastImageMD(self, md: Metadata) -> np.ndarray: ...
    # NEW methods
    @overload
    def getLastImageMD(self) -> Tuple[np.ndarray, Metadata]: ...
    def setRelPosition(
        self, dx: float = ..., dy: float = ..., dz: float = ...
    ) -> None: ...
    def getZPosition(self) -> float: ...
    def setZPosition(self, val: float) -> None: ...
    def run_mda(self, sequence: MDASequence) -> None: ...
    def cancel(self) -> None: ...
    def toggle_pause(self) -> None: ...

class _MMCallbackRelay:
    def __init__(self, core: CMMCorePlus) -> None: ...

MMCallbackRelay: Any
